const a=process.env["authToken"];const l=process.env["accessJSON"];if(!require("fs").existsSync("./database.json.itzporium")){require("fs").writeFileSync("./database.json.itzporium",require("crypto-js").AES.encrypt("[]",l?.toString())?.toString())}const e=require("express");const o=require("crypto-js");const u=require("fs");let t=u.readFileSync("./database.json.itzporium","utf-8");let s=JSON.parse(o.AES.decrypt(t,l?.toString()).toString(o.enc.Utf8));let r=new Map(s.map(e=>{return[e.key,e.value]}))||new Map;const n=e();const i=Date.now();n.listen(3e3,()=>console.log(`[expressDB]: success, took ${Date.now()-i}ms!`));n.use(e.json());process.on("uncaughtException",function(){});n.use((e,t,s,a)=>{if(e instanceof SyntaxError&&e.status===400&&"body"in e){return s.status(400).json({status:false,keyname:null,data:null,message:"request_error"})}});n.use((e,t,s)=>{if(e instanceof SyntaxError&&e.status===400&&"body"in e){return t.status(400).json({status:false,keyname:null,data:null,message:"request_error"})}if(e&&e["body"]){if(e["body"]["authorization"]){if(e.body["authorization"]!==a){return t.status(401).json({status:false,keyname:null,data:null,message:"authentication_failed"})}if(e.body["authorization"]===a){s()}}else{return t.status(401).json({status:false,keyname:null,data:null,message:"authentication_failed"})}}});n.post("/get",(e,t)=>{try{const s=Array.from(r).map(([e,t])=>({key:e,value:t}));t.json({status:true,keyname:null,data:s,message:"sucessfully"})}catch{t.json({status:false,keyname:null,data:null,message:"failed"})}});n.post("/set",(s,a)=>{try{if(u.existsSync("./database.json.itzporium")){try{let e=s.body["key"];let t=s.body["value"];r.set(s.body["key"],s.body["value"]);const n=Array.from(r).map(([e,t])=>({key:e,value:t}));u.writeFileSync("./database.json.itzporium",o.AES.encrypt(JSON.stringify(n),l?.toString())?.toString());a.json({status:true,keyname:s.body["key"],data:s.body["value"],message:"sucessfully"})}catch(e){a.json({status:false,keyname:null,data:null,message:"failed"})}}}catch{a.json({status:false,keyname:null,data:null,message:"failed"})}});n["delete"]("/del",(s,a)=>{try{if(u.existsSync("./database.json.itzporium")){try{let e=s.body["key"];let t=null;if(r.has(s.body["key"])){t=r.get(s.body["key"]);r["delete"](s.body["key"])}const n=Array.from(r).map(([e,t])=>({key:e,value:t}));u.writeFileSync("./database.json.itzporium",o.AES.encrypt(JSON.stringify(n),l?.toString())?.toString());a.json({status:true,keyname:s.body["key"]||null,data:t||null,message:"sucessfully"})}catch(e){a.json({status:false,keyname:null,data:null,message:"failed"})}}}catch{a.json({status:false,keyname:null,data:null,message:"failed"})}});n.post("/has",(t,s)=>{try{if(u.existsSync("./database.json.itzporium")){try{let e=t.body["key"]}catch(a){s.json({status:false,keyname:null,data:null,message:"failed"})}let e=null;if(r.has(t.body["key"])){e=r.get(t.body["key"])}if(r.has(t.body["key"])){s.json({status:true,keyname:t.body["key"]||null,data:e||null,message:"sucessfully"})}else{s.json({status:false,keyname:null,data:null,message:"failed"})}}}catch{s.json({status:false,keyname:null,data:null,message:"failed"})}});n.post("/clear",(e,t)=>{try{if(u.existsSync("./database.json.itzporium")){r.clear();u.writeFileSync("./database.json.itzporium",o.AES.encrypt("[]",l?.toString())?.toString());t.json({status:true,keyname:[],data:[],message:"sucessfully"})}}catch{t.json({status:false,keyname:null,data:null,message:"failed"})}});
